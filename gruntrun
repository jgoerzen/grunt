#!/usr/bin/env python2.2
# Startup from single-user installation
# Copyright (C) 2002 John Goerzen
# <jgoerzen@complete.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys, re, os, pwd, time, base64
from sys import stdin, stdout, argv
import pyme, pyme.core
import GnuPGInterface

args = argv[1:]

if len(args) != 2 and len(args) != 3:
    print """
    USAGE: gruntrun [-] delivery dest-command
    WHERE:

    - is optional, and if present, specifies that gruntrun should read
    from stdin the input to pass to stdin of dest-command.  If - is not
    given, there will be no input passed to stdin of dest-command.
    
    delivery is a UUCP path in the form of system!user OR
    an e-mail address in the form of user@system

    dest-command is the command to run on the remote."""
    sys.exit(1)
    
readstdin = 0
if args[0] == '-':
    readstdin = 1
    args = args[1:]

def copy(infile, outfile):
    while 1:
        data = infile.read(10240)
        if not len(data):
            return
        outfile.write(data)
    
assert args[0].find('!') != -1, 'e-mail mode not yet supported.'
machine, user = re.search('^(.+)!([^!]+)$', args[0]).groups()
outfile = os.popen("uux -z - '%s!gruntreceive-uucp'" % machine, 'w')

outfile.write(":GRUNT:INSECUREHEADER:FORMAT-1I:\n")
outfile.write(":USER:%s\n" % base64.encodestring(user).strip())
outfile.write(":DATA:\n")
outfile.flush()

gnupg = GnuPGInterface.GnuPG()
gnupg.options.meta_interactive = 1
gnupg.options.armor = 1
process = gnupg.run(['--sign'],
                    create_fhs=['stdin'],
                    attach_fhs={'stdout': outfile})
dataout = process.handles['stdin']
dataout.write(":GRUNT:SECUREHEADER:FORMAT-1S:\n")
dataout.write(":USER:%s\n" % base64.encodestring(user).strip())
dataout.write(":SENDER:%s\n" % \
              base64.encodestring("%s:%d:%d" % \
                                  (pwd.getpwuid(os.getuid())[0],
                                   os.getpid(),
                                   long(time.time()))))
rndfd = open("/dev/urandom", "rb")
rnddata = ''
while len(rnddata) < 256:
    rnddata += rndfd.read(256 - len(rnddata))
rndfd.close()
dataout.write(":RANDOM:%s\n" % base64.encodestring(rnddata).strip())
dataout.write(":MODE:%s\n" % base64.encodestring('EXEC').strip())
dataout.write(":DEST:%s\n" % base64.encodestring(args[1]).strip())
dataout.write(":DATA:\n")
if readstdin:
    copy(stdin, dataout)
dataout.close()
process.wait()
print "Request successfully sent."
