#!/usr/bin/env python2.2
# Startup from single-user installation
# Copyright (C) 2002 John Goerzen
# <jgoerzen@complete.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys, re, os, pwd, time, binascii
from sys import stdin, stdout, argv
import pyme, pyme.core
import GnuPGInterface
from optik import OptionParser

usage = """
    USAGE: %prog filename delivery dest-filename

    filename is the local file to send

    delivery is a UUCP path in the form of system!user OR
    an e-mail address in the form of user@system

    dest-filename is the location to place the data in on the remote."""

parser = OptionParser(usage = usage)
parser.add_option("-e", "--encrypt", dest = 'encrypt',
                  metavar='RECIPIENT', help = 'Encrypt data to RECIPIENT')
(options, args) = parser.parse_args()

if len(args) != 3:
    parser.print_help()
    sys.exit(1)
    
def copy(infile, outfile):
    while 1:
        data = infile.read(10240)
        if not len(data):
            return
        outfile.write(data)
    

infile = open(args[0])
assert args[1].find('!') != -1, 'e-mail mode not yet supported.'
machine, user = re.search('^(.+)!([^!]+)$', args[1]).groups()
outfile = os.popen("uux -z - '%s!gruntreceive-uucp'" % machine, 'w')

outfile.write(":GRUNT:INSECUREHEADER:FORMAT-1I:\n")
outfile.write(":USER:%s\n" % binascii.b2a_base64(user).strip())
outfile.write(":DATA:\n")
outfile.flush()

gnupg = GnuPGInterface.GnuPG()
gnupg.options.meta_interactive = 1
gnupg.options.armor = 1
gpgargs = ['--sign']
if options.encrypt:
    gpgargs.extend(['--encrypt', '--recipient', options.encrypt])
process = gnupg.run(gpgargs,
                    create_fhs=['stdin'],
                    attach_fhs={'stdout': outfile})
dataout = process.handles['stdin']
dataout.write(":GRUNT:SECUREHEADER:FORMAT-1S:\n")
dataout.write(":USER:%s\n" % binascii.b2a_base64(user).strip())
dataout.write(":SENDER:%s\n" % \
              binascii.b2a_base64("%s:%d:%d" % \
                                  (pwd.getpwuid(os.getuid())[0],
                                   os.getpid(),
                                   long(time.time()))).strip())
rndfd = open("/dev/urandom", "rb")
rnddata = ''
while len(rnddata) < 256:
    rnddata += rndfd.read(256 - len(rnddata))
rndfd.close()
print len(rnddata)
dataout.write(":RANDOM:%s\n" % binascii.b2a_base64(rnddata).strip())
dataout.write(":MODE:%s\n" % binascii.b2a_base64('PUT').strip())
dataout.write(":DEST:%s\n" % binascii.b2a_base64(args[2]).strip())
dataout.write(":DATA:\n")
copy(infile, dataout)
infile.close()
dataout.close()
process.wait()
print "Request successfully sent."
